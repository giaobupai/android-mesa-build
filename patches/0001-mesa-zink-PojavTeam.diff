diff --git a/meson.build b/meson.build
index b2cd74e..299d79d 100644
--- a/meson.build
+++ b/meson.build
@@ -2057,6 +2057,3 @@ if dep_unwind.found() 
 if with_osmesa
-  if not with_gallium_swrast
-    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
-  endif
   if host_machine.system() == 'windows'
     osmesa_lib_name = 'osmesa'
diff --git a/src/android_stub/meson.build b/src/android_stub/meson.build
index 6097ae8..0e3f27b 100644
--- a/src/android_stub/meson.build
+++ b/src/android_stub/meson.build
@@ -1,6 +1,6 @@
 if with_android_stub
   stub_libs = []
-  lib_names = ['cutils', 'hardware', 'log', 'nativewindow', 'sync']
+  lib_names = ['hardware', 'log', 'nativewindow', 'sync']
 
   if with_libbacktrace
     lib_names += ['backtrace']
diff --git a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
index ddb67b3..1937459 100644
--- a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
@@ -29,6 +29,10 @@
 #include "d3d12/d3d12_public.h"
 #endif
 
+#ifdef GALLIUM_ZINK
+#include "zink/zink_public.h"
+#endif
+
 static inline struct pipe_screen *
 sw_screen_create_named(struct sw_winsys *winsys, const char *driver)
 {
diff --git a/src/gallium/drivers/zink/zink_bo.c b/src/gallium/drivers/zink/zink_bo.c
index 0ba1e19..d8de94c 100644
--- a/src/gallium/drivers/zink/zink_bo.c
+++ b/src/gallium/drivers/zink/zink_bo.c
@@ -35,7 +35,7 @@
 #include "zink_screen.h"
 #include "util/u_hash_table.h"
 
-#if !defined(__APPLE__) && !defined(_WIN32)
+#if !defined(__APPLE__) && !defined(_WIN32) && !defined(__ANDROID__)
 #define ZINK_USE_DMABUF
 #include <xf86drm.h>
 #endif
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index f42f340..3146baf 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -269,5 +269,7 @@ disk_cache_init(struct zink_screen *screen)
        build_id_find_nhdr_for_addr(disk_cache_init);
-   unsigned build_id_len = build_id_length(note);
-   assert(note && build_id_len == 20); /* blake3 */
-   _mesa_blake3_update(&ctx, build_id_data(note), build_id_len);
+   if(note != NULL) {
+	unsigned build_id_len = build_id_length(note);
+	assert(note && build_id_len == 20); /* blake3 */
+	_mesa_blake3_update(&ctx, build_id_data(note), build_id_len);
+   }
 #endif
@@ -2852,4 +2854,9 @@ init_driver_workarounds(struct zink_screen *screen)
       abort();
    }
 
+   // Comment in Mesa 23.0.4:
+   /* once more testing has been done, use the #if 0 block */
+   // Seems like there was not enough testing, reverting to legacy behaviour
+
+#if 0
    /* these drivers benefit from renderpass optimization */
@@ -2867,6 +2874,7 @@ init_driver_workarounds(struct zink_screen *screen)
    default:
       break;
    }
+#endif
    if (zink_debug & ZINK_DEBUG_RP)
       screen->driver_workarounds.track_renderpasses = true;
    else if (zink_debug & ZINK_DEBUG_NORP)
@@ -3143,4 +3151,4 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
    u_trace_state_init();
 
-   screen->loader_lib = util_dl_open(VK_LIBNAME);
+   screen->loader_lib = (void*) strtoul(getenv("VULKAN_PTR"), NULL, 0x10);
    if (!screen->loader_lib) {
