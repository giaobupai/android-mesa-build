diff --git a/meson.build b/meson.build
index b2cd74e..299d79d 100644
--- a/meson.build
+++ b/meson.build
@@ -2069,36 +2069,6 @@ endif
 
 # TODO: symbol mangling
 
-if with_platform_wayland
-  dep_wl_scanner = dependency('wayland-scanner', native: true)
-  prog_wl_scanner = find_program(dep_wl_scanner.get_variable(pkgconfig : 'wayland_scanner'))
-  if dep_wl_scanner.version().version_compare('>= 1.15')
-    wl_scanner_arg = 'private-code'
-  else
-    wl_scanner_arg = 'code'
-  endif
-  dep_wl_protocols = dependency('wayland-protocols', version : '>= 1.34')
-  dep_wayland_client = dependency('wayland-client', version : '>=1.18')
-  dep_wayland_server = dependency('wayland-server', version : '>=1.18')
-  if with_egl
-    dep_wayland_egl = dependency('wayland-egl-backend', version : '>= 3')
-    dep_wayland_egl_headers = dep_wayland_egl.partial_dependency(compile_args : true)
-  endif
-  pre_args += '-DWL_HIDE_DEPRECATED'
-  if cc.has_function(
-      'wl_display_dispatch_queue_timeout',
-      prefix : '#include <wayland-client.h>',
-      dependencies: dep_wayland_client)
-    pre_args += ['-DHAVE_WL_DISPATCH_QUEUE_TIMEOUT']
-  endif
-  if cc.has_function(
-      'wl_display_create_queue_with_name',
-      prefix : '#include <wayland-client.h>',
-      dependencies: dep_wayland_client)
-    pre_args += ['-DHAVE_WL_CREATE_QUEUE_WITH_NAME']
-  endif
-endif
-
 dep_x11 = null_dep
 dep_xext = null_dep
 dep_xfixes = null_dep
@@ -883,7 +883,7 @@ with_clc = with_microsoft_clc or with_intel_clc or with_gallium_asahi or with_as
 
 dep_clc = null_dep
 if with_gallium_clover or with_clc
-  dep_clc = dependency('libclc')
+  dep_clc = find_program('libclc', required : false)
 endif
 
 gl_pkgconfig_c_flags = []
@@ -1904,9 +1904,9 @@ if with_clover_spirv or with_clc
     '>= @0@.@1@'.format(chosen_llvm_version_major, chosen_llvm_version_minor),
     '< @0@.@1@'.format(chosen_llvm_version_major, chosen_llvm_version_minor + 1) ]
 
-  dep_spirv_tools = dependency('SPIRV-Tools', required : true, version : '>= 2018.0')
+  dep_spirv_tools = find_program('SPIRV-Tools', required : false, version : '>= 2018.0')
   # LLVMSPIRVLib is available at https://github.com/KhronosGroup/SPIRV-LLVM-Translator
-  dep_llvmspirvlib = dependency('LLVMSPIRVLib', required : true, version : _llvmspirvlib_version)
+  dep_llvmspirvlib = find_program('LLVMSPIRVLib', required : false)
 else
   dep_spirv_tools = null_dep
   dep_llvmspirvlib = null_dep
@@ -2057,6 +2057,3 @@ if dep_unwind.found() 
 if with_osmesa
-  if not with_gallium_swrast
-    error('OSMesa gallium requires gallium softpipe or llvmpipe.')
-  endif
   if host_machine.system() == 'windows'
     osmesa_lib_name = 'osmesa'
diff --git a/src/android_stub/meson.build b/src/android_stub/meson.build
index 6097ae8..0e3f27b 100644
--- a/src/android_stub/meson.build
+++ b/src/android_stub/meson.build
@@ -1,6 +1,6 @@
 if with_android_stub
   stub_libs = []
-  lib_names = ['cutils', 'hardware', 'log', 'nativewindow', 'sync']
+  lib_names = ['hardware', 'log', 'nativewindow', 'sync']
 
   if with_libbacktrace
     lib_names += ['backtrace']
diff --git a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
index ddb67b3..1937459 100644
--- a/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
+++ b/src/gallium/auxiliary/target-helpers/inline_sw_helper.h
@@ -29,6 +29,10 @@
 #include "d3d12/d3d12_public.h"
 #endif
 
+#ifdef GALLIUM_ZINK
+#include "zink/zink_public.h"
+#endif
+
 static inline struct pipe_screen *
 sw_screen_create_named(struct sw_winsys *winsys, const char *driver)
 {
diff --git a/src/gallium/drivers/zink/zink_bo.c b/src/gallium/drivers/zink/zink_bo.c
index 0ba1e19..d8de94c 100644
--- a/src/gallium/drivers/zink/zink_bo.c
+++ b/src/gallium/drivers/zink/zink_bo.c
@@ -35,7 +35,7 @@
 #include "zink_screen.h"
 #include "util/u_hash_table.h"
 
-#if !defined(__APPLE__) && !defined(_WIN32)
+#if !defined(__APPLE__) && !defined(_WIN32) && !defined(__ANDROID__)
 #define ZINK_USE_DMABUF
 #include <xf86drm.h>
 #endif
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index f42f340..3146baf 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -269,5 +269,7 @@ disk_cache_init(struct zink_screen *screen)
        build_id_find_nhdr_for_addr(disk_cache_init);
-   unsigned build_id_len = build_id_length(note);
-   assert(note && build_id_len == 20); /* blake3 */
-   _mesa_blake3_update(&ctx, build_id_data(note), build_id_len);
+   if(note != NULL) {
+	unsigned build_id_len = build_id_length(note);
+	assert(note && build_id_len == 20); /* sha1 */
+	_mesa_sha1_update(&ctx, build_id_data(note), build_id_len);
+   }
 #endif
@@ -2852,4 +2854,9 @@ init_driver_workarounds(struct zink_screen *screen)
       abort();
    }
 
+   // Comment in Mesa 23.0.4:
+   /* once more testing has been done, use the #if 0 block */
+   // Seems like there was not enough testing, reverting to legacy behaviour
+
+#if 0
    /* these drivers benefit from renderpass optimization */
@@ -2867,6 +2874,7 @@ init_driver_workarounds(struct zink_screen *screen)
    default:
       break;
    }
+#endif
    if (zink_debug & ZINK_DEBUG_RP)
       screen->driver_workarounds.track_renderpasses = true;
    else if (zink_debug & ZINK_DEBUG_NORP)
@@ -3143,4 +3151,4 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
    u_trace_state_init();
 
-   screen->loader_lib = util_dl_open(VK_LIBNAME);
+   screen->loader_lib = (void*) strtoul(getenv("VULKAN_PTR"), NULL, 0x10);
    if (!screen->loader_lib) {
@@ -3158,7 +3166,7 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
    }
 
    screen->instance_info.loader_version = zink_get_loader_version(screen);
-   if (config) {
+   /*if (config) {
       driParseConfigFiles(config->options, config->options_info, 0, "zink",
                           NULL, NULL, NULL, 0, NULL, 0);
       screen->driconf.dual_color_blend_by_location = driQueryOptionb(config->options, "dual_color_blend_by_location");
@@ -3166,7 +3174,7 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
       //screen->driconf.inline_uniforms = driQueryOptionb(config->options, "radeonsi_inline_uniforms");
       screen->driconf.emulate_point_smooth = driQueryOptionb(config->options, "zink_emulate_point_smooth");
       screen->driconf.zink_shader_object_enable = driQueryOptionb(config->options, "zink_shader_object_enable");
-   }
+   }*/
 
    if (!zink_create_instance(screen, dev_major > 0 && dev_major < 255))
       goto fail;
diff --git a/src/gallium/targets/osmesa/meson.build b/src/gallium/targets/osmesa/meson.build
index d16e785..0652936 100644
--- a/src/gallium/targets/osmesa/meson.build
+++ b/src/gallium/targets/osmesa/meson.build
@@ -55,6 +55,6 @@ libosmesa = shared_library(
   dependencies : [
-    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_swrast, idep_mesautil,
+    dep_ws2_32, dep_selinux, dep_thread, dep_clock, dep_unwind, driver_zink, idep_mesautil,
   ],
   name_prefix : host_machine.system() == 'windows' ? '' : [],  # otherwise mingw will create libosmesa.dll
-  soversion : host_machine.system() == 'windows' ? '' : '8',
+  soversion : '',
   version : '8.0.0',
diff --git a/src/util/os_misc.c b/src/util/os_misc.c
index 7261577..f2ceb88 100644
--- a/src/util/os_misc.c
+++ b/src/util/os_misc.c
@@ -128,52 +128,7 @@ os_log_message(const char *message)
 #endif
 }
 
-#if DETECT_OS_ANDROID
-#  include <ctype.h>
-#  include "c11/threads.h"
-
-/**
- * Get an option value from android's property system, as a fallback to
- * getenv() (which is generally less useful on android due to processes
- * typically being forked from the zygote.
- *
- * The option name used for getenv is translated into a property name
- * by:
- *
- *  1) convert to lowercase
- *  2) replace '_' with '.'
- *  3) if necessary, prepend "mesa."
- *
- * For example:
- *  - MESA_EXTENSION_OVERRIDE -> mesa.extension.override
- *  - GALLIUM_HUD -> mesa.gallium.hud
- *
- */
-static char *
-os_get_android_option(const char *name)
-{
-   static thread_local char os_android_option_value[PROPERTY_VALUE_MAX];
-   char key[PROPERTY_KEY_MAX];
-   char *p = key, *end = key + PROPERTY_KEY_MAX;
-   /* add "mesa." prefix if necessary: */
-   if (strstr(name, "MESA_") != name)
-      p += strlcpy(p, "mesa.", end - p);
-   p += strlcpy(p, name, end - p);
-   for (int i = 0; key[i]; i++) {
-      if (key[i] == '_') {
-         key[i] = '.';
-      } else {
-         key[i] = tolower(key[i]);
-      }
-   }
 
-   int len = property_get(key, os_android_option_value, NULL);
-   if (len > 1) {
-      return os_android_option_value;
-   }
-   return NULL;
-}
-#endif
 
 #if DETECT_OS_WINDOWS
 
@@ -195,11 +150,7 @@ const char *
 os_get_option(const char *name)
 {
    const char *opt = getenv(name);
-#if DETECT_OS_ANDROID
-   if (!opt) {
-      opt = os_get_android_option(name);
-   }
-#endif
+
    return opt;
 }
 
diff --git a/src/util/perf/cpu_trace.h b/src/util/perf/cpu_trace.h
index 6cebb51..c1726b1 100644
--- a/src/util/perf/cpu_trace.h
+++ b/src/util/perf/cpu_trace.h
@@ -28,15 +28,3 @@
  *   https://github.com/android/ndk/issues/1178
  */
-#elif DETECT_OS_ANDROID && !defined(__cplusplus)
-
-#include <cutils/trace.h>
-
-#define _MESA_TRACE_BEGIN(name)                                              \
-   atrace_begin(ATRACE_TAG_GRAPHICS, name)
-#define _MESA_TRACE_END() atrace_end(ATRACE_TAG_GRAPHICS)
-#define _MESA_TRACE_FLOW_BEGIN(name, id)                                     \
-   atrace_begin(ATRACE_TAG_GRAPHICS, name)
-#define _MESA_TRACE_SET_COUNTER(name, value)
-#define _MESA_TRACE_TIMESTAMP_BEGIN(name, track_id, flow_id, timestamp)
-#define _MESA_TRACE_TIMESTAMP_END(name, track_id, timestamp)
 #else
